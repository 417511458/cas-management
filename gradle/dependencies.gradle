ext.libraries = [
        jaxb                    : [
                dependencies.create("javax.xml.bind:jaxb-api:$jaxbApiVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("javax.xml.ws:jaxws-api:$jaxbApiVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.main.javaee-api:javax.jws:$javaxJwsVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("javax.xml.soap:javax.xml.soap-api:$javaxSoapApiVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.jaxb:jaxb-runtime:$jaxbGlassfishVersion") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.jaxb:jaxb-core:$jaxbGlassfishVersion") {
                    force = true
                }
        ],
        aspectj                 : [
                dependencies.create("org.aspectj:aspectjrt:$aspectjVersion") {
                    force = true
                },
                dependencies.create("org.aspectj:aspectjweaver:$aspectjVersion") {
                    force = true
                }
        ],
        casclient              : dependencies.create("org.jasig.cas.client:cas-client-core:$casClientVersion") {
            exclude(group: "javax.servlet", module: "servlet-api")
            exclude(group: "org.slf4j", module: "log4j-over-slf4j")
            exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            force = true
        },
        commons                 : [
                dependencies.create("commons-io:commons-io:$commonsIoVersion") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-text:$commonsTextVersion") {
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    force = true
                },
                dependencies.create("org.apache.commons:commons-pool2:$commonsPoolVersion") {
                    force = true
                },
                dependencies.create("commons-cli:commons-cli:$commonsCliVersion") {
                    force = true
                },
                dependencies.create("commons-beanutils:commons-beanutils:$commonsBeansVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    force = true
                },
                dependencies.create("commons-logging:commons-logging:$commonsLoggingVersion") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-configuration2:$commonsConfigVersion") {
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    force = true
                },
                dependencies.create("commons-validator:commons-validator:$commonsValidatorVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "commons-digester", module: "commons-digester")
                    force = true
                },
                dependencies.create("commons-codec:commons-codec:$commonsCodecVersion") {
                    force = true
                },
                dependencies.create("commons-jexl:commons-jexl:$commonsJexlVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.apache.commons:commons-lang3:$commonsLangVersion") {
                    force = true
                },
                dependencies.create("commons-lang:commons-lang:2.6") {
                    force = true
                },
                dependencies.create("org.jooq:jool:$joolVersion") {
                    force = true
                },
                dependencies.create("com.github.lalyos:jfiglet:$jfigletVersion") {
                    force = true
                },
                dependencies.create("commons-collections:commons-collections:$commonsCollections3Version") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-collections4:$commonsCollectionsVersion") {
                    force = true
                }
        ],
        findbugscontrib         : dependencies.create("com.mebigfatguy.fb-contrib:fb-contrib:$findbugsContribVersion") {
            force = true
        },
        findbugs                : dependencies.create("com.github.spotbugs:spotbugs:$spotbugsVersion") {
            force = true
        },
        findbugsannotations     : dependencies.create("com.github.spotbugs:spotbugs-annotations:$spotbugsVersion") {
            force = true
        },
        findbugssec             : dependencies.create("com.h3xstream.findsecbugs:findsecbugs-plugin:$findbugsSecVersion") {
            force = true
        },
        guava                   : [
                dependencies.create("com.google.guava:guava:$guavaVersion") {
                    force = true
                },
                dependencies.create("org.reflections:reflections:$reflectionsVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.javassist", module: "javassist")
                    force = true
                },
                dependencies.create("org.javassist:javassist:$javassistVersion") {
                    force = true
                },
                dependencies.create("org.springmodules:spring-modules-cache:0.8") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "ant", module: "ant")
                    exclude(group: "xstream", module: "xstream")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "xpp3", module: "xpp3_min")
                    exclude(group: "jcs", module: "jcs")
                    exclude(group: "jboss", module: "jboss-system")
                    exclude(group: "jboss", module: "javassist")
                    exclude(group: "jboss", module: "jboss-cache")
                    exclude(group: "jboss", module: "jboss-jmx")
                    exclude(group: "jboss", module: "jboss-minimal")
                    exclude(group: "jboss", module: "jboss-common")
                    exclude(group: "jgroups", module: "jgroups-all")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "xjavadoc", module: "xjavadoc")
                    exclude(group: "jini", module: "xjavadoc")
                    exclude(group: "jini", module: "jsk-platform")
                    exclude(group: "jini", module: "boot")
                    exclude(group: "jini", module: "jsk-lib")
                    exclude(group: "jini", module: "mahalo")
                    exclude(group: "jini", module: "reggie")
                    exclude(group: "jini", module: "start")
                    exclude(group: "jini", module: "webster")
                    exclude(group: "ehcache", module: "ehcache")
                    exclude(group: "gigaspaces", module: "gigaspaces-ce")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.springframework", module: "spring")
                    force = true
                }
        ],
        groovy                  : [
                dependencies.create("org.codehaus.groovy:groovy-jsr223:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-console:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-json:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-xml:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-datetime:$groovyVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-groovysh:$groovyVersion") {
                    force = true
                }
        ],
        jasypt                 : dependencies.create("org.jasypt:jasypt:$jasyptVersion") {
            exclude(group: "commons-cli", module: "commons-cli")
            force = true
        },
        inspektr               : [
                dependencies.create("org.apereo.inspektr:inspektr-audit:$inspektrVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "javax.validation", module: "validation-api")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.hjson", module: "hjson")
                    force = true
                },
                dependencies.create("org.apereo.inspektr:inspektr-support-spring:$inspektrVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.hjson", module: "hjson")
                    exclude(group: "javax.validation", module: "validation-api")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                }
        ],
        javax                  : [
                dependencies.create("javax.servlet:javax.servlet-api:$javaxServletVersion") {
                    force = true
                }
        ],
        javaximpl              : [
                dependencies.create("javax.servlet:jstl:$javaxJstlVersion"),
                dependencies.create("javax.transaction:jta:$jtaVersion")
        ],
        jackson                : [
                dependencies.create("com.fasterxml.jackson.core:jackson-databind:$jacksonDatabindVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonDatabindVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.core:jackson-annotations:$jacksonDatabindVersion") {
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonDatabindVersion") {
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonDatabindVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                },
                dependencies.create("org.hjson:hjson:$hjsonVersion") {
                    force = true
                },
                dependencies.create("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonDatabindVersion") {
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    force = true
                }
        ],
        tests                   : [
                dependencies.create("com.github.kstyrc:embedded-redis:$embeddedRedisVersion") {
                    exclude(module: "commons-io")
                    force = true
                },
                dependencies.create("org.mockito:mockito-core:$mockitoVersion") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.objenesis:objenesis:$objenesisVersion") {
                    exclude(group: "org.mockito", module: "mockito-all")
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-api:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-engine:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-params:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.vintage:junit-vintage-engine:$junitVersion") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-engine:$junitPlatformVersion") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-suite-api:$junitPlatformVersion") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-launcher:$junitPlatformVersion") {
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-test:$springBootVersion") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-test")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.skyscreamer", module: "jsonassert")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-all")
                    exclude(group: "org.mockito", module: "mockito-core")
                    force = true
                },
                dependencies.create("org.hsqldb:hsqldb:$hsqlVersion"),
                dependencies.create("org.skyscreamer:jsonassert:$jsonassertVersion") {
                    exclude(group: "org.json", module: "json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework:spring-test:$springVersion") {
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.json:json:$jsonVersion") {
                    force = true
                }
        ],
        log4j                   : [
                dependencies.create("org.apache.logging.log4j:log4j-api:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-core:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-jcl:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-web:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.logging.log4j:log4j-slf4j18-impl:$log4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.slf4j:slf4j-api:$slf4jVersion"),
                dependencies.create("org.slf4j:jul-to-slf4j:$slf4jVersion"),
                dependencies.create("org.slf4j:jcl-over-slf4j:$slf4jVersion"),
                dependencies.create("com.lmax:disruptor:$disruptorVersion")
        ],
        metrics                 : [
                dependencies.create("com.timgroup:java-statsd-client:$statsdVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-core:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-prometheus:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-graphite:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-ganglia:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-jmx:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-influx:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-statsd:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-atlas:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-signalfx:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-wavefront:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-new-relic:$micrometerVersion") {
                    force = true
                },
                dependencies.create("io.micrometer:micrometer-registry-cloudwatch:$micrometerVersion") {
                    force = true
                }
        ],
        pac4j                  : [
                dependencies.create("org.pac4j:pac4j-cas:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-config:$pac4jVersion") {
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-core:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-http:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-jwt:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-oidc:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-mongo:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-oauth:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.commons", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-saml:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-saml-impl")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    force = true
                },
                dependencies.create("org.pac4j:spring-webmvc-pac4j:$pac4jSpringWebmvcVersion") {
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.pac4j", module: "pac4j-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("com.nimbusds:nimbus-jose-jwt:$nimbusJoseVersion") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("com.nimbusds:oauth2-oidc-sdk:$nimbusOidcVersion") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("net.minidev:json-smart:$jsonSmartVersion") {
                    force = true
                }
        ],

        pac4jCouchDb             : dependencies.create("org.pac4j:pac4j-couch:$pac4jVersion") {
            exclude(group: "org.pac4j", module: "pac4j-core")
            exclude(group: "org.ektorp", module: "org.ektorp")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
        },
        persondirectory         : dependencies.create("org.apereo.service.persondir:person-directory-impl:$personDirectoryVersion") {
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            exclude(group: "org.apache.commons", module: "commons-lang3")
            exclude(group: "org.apache.commons", module: "commons-collections4")
            exclude(group: "org.springframework", module: "spring-beans")
            exclude(group: "org.ldaptive", module: "ldaptive")
            exclude(group: "org.springframework", module: "spring-context")
            exclude(group: "org.springframework", module: "spring-core")
            exclude(group: "org.springframework", module: "spring-tx")
            exclude(group: "com.google.guava", module: "guava")
            exclude(group: "commons-io", module: "commons-io")
            exclude(group: "com.sun.xml.bind", module: "jaxb-impl")
            force = true
        },
        quartz                  : dependencies.create("org.quartz-scheduler:quartz:$quartzVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "c3p0", module: "c3p0")
            exclude(group: "com.mchange", module: "c3p0")
            exclude(group: "com.zaxxer", module: "HikariCP-java6")
            force = true
        },
        shiro                   : [
                dependencies.create("org.apache.shiro:shiro-core:$shiroVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    force = true
                }
        ],
        twilio                  : dependencies.create("com.twilio.sdk:twilio:$twilioVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            exclude(group: "javax.xml.bind", module: "jaxb-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            force = true
        },
        nexmo                  : dependencies.create("com.nexmo:client:$nexmoVersion") {
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            exclude(group: "javax.xml.bind", module: "jaxb-api")
            exclude(group: "org.apache.httpcomponents", module: "httpclient")
            exclude(group: "commons-io", module: "commons-io")
            exclude(group: "commons-logging", module: "commons-logging")
            exclude(group: "commons-codec", module: "commons-codec")
            exclude(group: "org.apache.commons", module: "commons-lang3")
            force = true
        },
        textmagic               : [
                dependencies.create("com.textmagic.sdk:textmagic-java-sdk:$textMagicVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.codehaus.jackson", module: "jackson-mapper-asl")
                    exclude(group: "commons-lang", module: "commons-lang")
                    force = true
                },
                dependencies.create("org.codehaus.jackson:jackson-mapper-asl:1.9.13") {
                    transitive = false
                    force = true
                },
                dependencies.create("org.codehaus.jackson:jackson-core-asl:1.9.13") {
                    transitive = false
                    force = true
                }
        ],
        springcomponentindexer  : [
                dependencies.create("org.springframework:spring-context-indexer:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        springbootconfigmetadata: [
                dependencies.create("org.springframework.boot:spring-boot-configuration-processor:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "org.json", module: "json")
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.json:json:$jsonVersion") {
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-configuration-metadata:$springBootVersion") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("com.github.javaparser:javaparser-core:$javaParserVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                }

        ],
        springbootadminserver   : [
                dependencies.create("de.codecentric:spring-boot-admin-server:$springBootAdminVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.netflix.archaius", module: "archaius-core")
                    exclude(group: "org.apache.cassandra", module: "cassandra-all")
                    force = true
                },
                dependencies.create("de.codecentric:spring-boot-admin-server-ui:$springBootAdminVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.apache.cassandra", module: "cassandra-all")
                    force = true
                },
                dependencies.create("com.netflix.zuul:zuul-core:$zuulVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.mockito", module: "mockito-all")
                    exclude(group: "org.codehaus.groovy", module: "groovy-all")
                    force = true
                }
        ],
        springbootadminclient   : [
                dependencies.create("de.codecentric:spring-boot-admin-starter-client:$springBootAdminVersion") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    force = true
                }
        ],
        springboot              : [
                dependencies.create("org.springframework.boot:spring-boot-starter-websocket:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-mail:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-web:$springBootVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-autoconfigure:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot:$springBootVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-devtools:$springBootVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-properties-migrator:$springBootVersion") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-log4j2:$springBootVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-slf4j-impl")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-core")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-jcl")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-actuator:$springBootVersion") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springboottomcat        : [
                dependencies.create("org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion") {
                    force = true
                },
                dependencies.create("org.apache.tomcat.embed:tomcat-embed-jasper:$springBootTomcatVersion") {
                    force = true
                },
                dependencies.create("org.apache.tomcat:tomcat-catalina-ha:$springBootTomcatVersion") {
                    force = true
                }
        ],
        springintegration       : [
                dependencies.create("org.springframework.integration:spring-integration-core:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework.integration:spring-integration-jmx:$springIntegrationVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springcloudbus          : [
                dependencies.create("org.springframework.cloud:spring-cloud-bus:$springCloudBusVersion") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    force = true
                },
        ],
        springcloudbuskafka     : [
                dependencies.create("org.springframework.cloud:spring-cloud-starter-bus-kafka:$springCloudBusVersion") {
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "io.reactivex", module: "rxjava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "org.springframework.kafka", module: "spring-kafka")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.scala-lang", module: "scala-library")
                    exclude(group: "org.apache.kafka", module: "kafka-clients")
                    force = true
                },
                dependencies.create("org.springframework.kafka:spring-kafka:$kafkaSpringVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.scala-lang", module: "scala-library")
                    force = true
                }
        ],
        springintegrationamqp   : [
                dependencies.create("org.springframework.integration:spring-integration-amqp:$springIntegrationVersion") {
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    force = true
                }
        ],
        springcloudbusamqp      : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-monitor:$springCloudConfigVersion") {
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-bus")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.yaml", module: "snakeyaml")
                    exclude(group: "org.springframework.integration", module: "spring-integration-amqp")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    force = true
                },
                dependencies.create("org.springframework.cloud:spring-cloud-starter-bus-amqp:$springCloudBusVersion") {
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.integration", module: "spring-integration-amqp")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.springframework.amqp", module: "spring-rabbit")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    force = true
                }
        ],
        zookeeper               : [
                dependencies.create("org.apache.zookeeper:zookeeper:$zookeeperVersion") {
                    exclude(group: "jline", module: "jline")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.curator", module: "curator-recipes")
                    exclude(group: "org.apache.curator", module: "curator-framework")
                    exclude(group: "org.apache.curator", module: "curator-client")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                },
                dependencies.create("org.apache.curator:curator-recipes:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.curator:curator-framework:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.apache.curator:curator-client:$curatorVersion") {
                    exclude(group: "org.apache.zookeeper", module: "zookeeper")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }

        ],
        springcloudconfigclient : [
                dependencies.create("org.springframework.cloud:spring-cloud-config-client:$springCloudConfigVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework.security", module: "spring-security-crypto")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-commons")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    force = true
                }
        ],
        springcloud            : [
                dependencies.create("org.springframework.cloud:spring-cloud-commons:$springCloudCommonsVersion") {
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework.retry", module: "spring-retry")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.esotericsoftware", module: "kryo")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework.boot", module: "spring-boot-autoconfigure")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-validation")
                    exclude(group: "org.springframework.integration", module: "spring-integration-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    force = true
                },
                dependencies.create("org.springframework.cloud:spring-cloud-context:$springCloudContextVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "org.slf4j", module: "logj-over-slf4j")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter")
                    exclude(group: "org.springframework.cloud", module: "spring-cloud-context")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    force = true
                }
        ],
        casServer              : [
                dependencies.create("org.apereo.cas:cas-server-support-ldap-core:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-authentication-api:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-configuration-model:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-util:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-util:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-util-api:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-configuration-api:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-events:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-authentication:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-authentication-attributes:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-services:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-services:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-services-api:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-services-authentication:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-services-registry:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-logging-config:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-person-directory:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-surrogate-api:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-oauth-services:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-saml-idp-core:$casVersion") {
                    transitive = false
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-oidc-services:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-oidc-core:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-ws-idp-api:$casVersion") {
                    transitive = false
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-grouper-core:$casVersion") {
                    transitive = false
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-services-authentication:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-json-service-registry:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-protocol:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-support-discovery-profile:$casVersion") {
                    transitive = false
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-configuration-model:$casVersion") {
                    force = true
                },
                dependencies.create("org.apereo.cas:cas-server-core-api-audit:$casVersion") {
                    force = true
                }
        ],
        springcomponentindexer  : [
                dependencies.create("org.springframework:spring-context-indexer:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        spring                  : [
                dependencies.create("org.springframework:spring-aop:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-beans:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework.webflow:spring-binding:$springWebflowVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework:spring-context:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-context-support:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-core:$springVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    force = true
                },
                dependencies.create("org.springframework.data:spring-data-mongodb:$springDataMongoDbVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.data", module: "spring-data-commons")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    force = true
                },
                dependencies.create("org.springframework.data:spring-data-commons:$springDataCommonsVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    force = true
                },

                dependencies.create("org.springframework:spring-jms:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-messaging")
                    force = true
                },
                dependencies.create("org.springframework:spring-messaging:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-expression:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-jdbc:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-orm:$springVersion"),
                dependencies.create("org.springframework:spring-tx:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework:spring-web:$springVersion") {
                    force = true
                },
                dependencies.create("org.springframework.webflow:spring-webflow:$springWebflowVersion") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    force = true
                },
                dependencies.create("org.apereo:spring-webflow-client-repo:$springWebflowClientVersion") {
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    force = true
                },
                dependencies.create("org.springframework:spring-webmvc:$springVersion") {
                    force = true
                }
        ],
        jgit                   :
                dependencies.create("org.eclipse.jgit:org.eclipse.jgit:$jgitVersion") {
                    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
                    exclude group: 'org.slf4j', module: 'slf4j'
                    exclude group: 'org.slf4j', module: 'slf4j-api'
                    exclude group: 'org.apache.commons', module: 'commons-lang3'
                }
]
